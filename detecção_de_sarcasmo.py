# -*- coding: utf-8 -*-
"""Detecção de sarcasmo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NSDsA7ZZIt9NalEi6ha_FdBV-htUjn7D
"""

# Commented out IPython magic to ensure Python compatibility.
# Run this to ensure TensorFlow 2.x is used
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass

import json
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

vocab_size = 10000 # Usar 1000 palavras mais frquentes e ignorar as outras.
embedding_dim = 16 # Dimensão do vetor de entrada.
max_length = 100  # Define os tamanhos das sequências.
trunc_type='post' # Pode cortar palavras no início ou no final.
padding_type='post' # Preenche sentenças pequenas com 0's. Todas as sentenças tem que ter tamanhos iguais.
oov_tok = "<OOV>" # Out Of Vocabulary - palavras que estão fora do vocabulário.
training_size = 20000 # Tamanho do conjunto de treino.

!wget --no-check-certificate \
    https://storage.googleapis.com/learning-datasets/sarcasm.json \
    -O /tmp/sarcasm.json

with open("/tmp/sarcasm.json", 'r') as f: # Coleta dados sobre manchetes de revistas. O arquivo json é aberto no modo de leitura r.
    datastore = json.load(f) # O conteúdo é carregado na variável datashore.

sentences = [] # vai armazenar as manchetes de notícias.
labels = [] # vai armazenar os rótulos, indicando se a manchete é sarcástica ou não.

for item in datastore: # um laço for percorre cada item (dicionário) no datastore.
    sentences.append(item['headline']) # Cada dicionário tem uma chave 'headline' (que contém a manchete) e uma chave 'is_sarcastic' (que contém um rótulo indicando se a manchete é sarcástica ou não).
    labels.append(item['is_sarcastic'])

training_sentences = sentences[0:training_size] # determina a quantidade de exemplos a serem usados para treinamento.
testing_sentences = sentences[training_size:] # determina a quantidade de exemplos a serem usados para o teste.
training_labels = labels[0:training_size] # a partir de quantos exemplos são usados no treino, define os rótulos correspondentes à cada sentença (0 ou 1).
testing_labels = labels[training_size:]

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok) # Utiliza as informações sobre cada variável definida anteriormente.
tokenizer.fit_on_texts(training_sentences) # Treina o tokenizer nas sentenças de treino. A variável 'training_sentences' percorre todas as sentenças e cria um vocabulário, associando um número único para cada palavra com base em sua frequência no conjunto de dados.

word_index = tokenizer.word_index # Está criando um dicionário (word_index) que mapeia cada palavra do vocabulário para um número inteiro, representando seu token correspondente.

training_sequences = tokenizer.texts_to_sequences(training_sentences) # Converte as sentenças de treino em sequências de números inteiros (tokens) e, em seguida, ajustando o comprimento dessas sequências para garantir que todas tenham o mesmo tamanho.
training_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)

testing_sequences = tokenizer.texts_to_sequences(testing_sentences)
testing_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)

# Need this block to get it to work with TensorFlow 2.x
import numpy as np
training_padded = np.array(training_padded) # Essas variáveis contêm as sequências de entrada preenchidas/truncadas e convertidas para array para entrada do modelo.
training_labels = np.array(training_labels) # Essas variáveis contêm os rótulos correspondentes às sentenças, indicando a classificação de cada uma e são convertidas para array.
testing_padded = np.array(testing_padded) # Essas variáveis contêm as sequências de entrada preenchidas/truncadas e convertidas para array para entrada do modelo.
testing_labels = np.array(testing_labels) # Essas variáveis contêm os rótulos correspondentes às sentenças, indicando a classificação de cada uma e são convertidas para array.

# Modelo de rede neural que treinará e classificará os dados.
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(24, activation='relu'), # usada em camadas intermediárias. Transforma valores negativos em zeros.
    tf.keras.layers.Dense(1, activation='sigmoid') # usada geralmente na saída. Usada para classificação binária.
])
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

num_epochs = 30
history = model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels), verbose=2)

# É um dicionário reverso que converte os tokens de volta as palavras.
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])

def decode_sentence(text):
    return ' '.join([reverse_word_index.get(i, '?') for i in text]) # Se o token não estiver no reverse_word_index, ele retorna '?'

print(decode_sentence(training_padded[0]))
print(training_sentences[2])
print(labels[2])

e = model.layers[0]
weights = e.get_weights()[0]
print(weights.shape) # shape: (vocab_size, embedding_dim)

import io

out_v = io.open('vecs.tsv', 'w', encoding='utf-8') # Este arquivo será usado para armazenar os vetores de embeddings. Cada linha representará um vetor associado a uma palavra.
out_m = io.open('meta.tsv', 'w', encoding='utf-8') # Este arquivo armazenará as palavras correspondentes a cada vetor de embedding. Cada linha conterá uma palavra.
for word_num in range(1, vocab_size): # O loop itera sobre os índices do vocabulário.
  word = reverse_word_index[word_num] # Em 'word', para cada número de palavra (word_num), ele busca a palavra correspondente no reverse_word_index.
  embeddings = weights[word_num]
  out_m.write(word + "\n") # Adiciona a palavra no arquivo meta.tsv, uma por linha.
  out_v.write('\t'.join([str(x) for x in embeddings]) + "\n") # Converte cada valor do vetor de embeddings em uma string e os junta com tabulações (\t). Essa linha é então escrita no arquivo vecs.tsv.
out_v.close() # Arquivos são fechado para garantir que todas as operações sejam garantidas.
out_m.close() # Arquivos são fechado para garantir que todas as operações sejam garantidas.

try:
  from google.colab import files
except ImportError:
  pass
else:
  files.download('vecs.tsv')
  files.download('meta.tsv')

sentence = ["Oh great, another thrilling episode of waiting for my laundry to dry", "I clapped because it’s finished, not because I like it", "Oh, wonderful! Another Monday. Just what I needed to start my week!"]
sequences = tokenizer.texts_to_sequences(sentence)
padded = pad_sequences(sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)
print(model.predict(padded))